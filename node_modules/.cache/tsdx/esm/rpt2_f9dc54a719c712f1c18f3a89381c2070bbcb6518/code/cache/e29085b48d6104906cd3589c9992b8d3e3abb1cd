{"code":"/**\r\n\nCopyright 2019 Forestry.io Inc\r\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n\n*/\r\nimport { useMemo } from 'react';\r\nimport { useCMS } from '@tinacms/react-core';\r\nexport class GithubFile {\r\n    constructor(cms, path, parse, serialize) {\r\n        this.cms = cms;\r\n        this.path = path;\r\n        this.parse = parse;\r\n        this.serialize = serialize;\r\n        this.sha = null;\r\n        this.fetchFile = async () => {\r\n            const res = await this.cms.api.github.fetchFile(this.path);\r\n            this.sha = res.sha;\r\n            return this.parse ? this.parse(res.content) : res.content;\r\n        };\r\n        this.commit = async (data, message = 'Update from TinaCMS', retryOnConflict = true) => {\r\n            const serializedContent = this.serialize ? this.serialize(data) : data;\r\n            try {\r\n                if (!this.sha) {\r\n                    const res = await this.cms.api.github.fetchFile(this.path);\r\n                    this.sha = res.sha;\r\n                }\r\n                const response = await this.cms.api.github.commit(this.path, this.sha, serializedContent, message);\r\n                this.sha = response.content.sha;\r\n                this.cms.events.dispatch({ type: 'github:commit', response });\r\n                return response;\r\n            }\r\n            catch (error) {\r\n                if (error.status == 409 && retryOnConflict) {\r\n                    await this.fetchFile(); // update sha\r\n                    await this.commit(data, message, false); // try one more time\r\n                }\r\n                else {\r\n                    this.cms.events.dispatch({ type: 'github:error', error });\r\n                    throw error;\r\n                }\r\n            }\r\n        };\r\n    }\r\n}\r\nexport const useGithubFile = ({ path, parse, serialize, }) => {\r\n    const cms = useCMS();\r\n    return useMemo(() => {\r\n        return new GithubFile(cms, path, parse, serialize);\r\n    }, [path, parse, serialize, cms]);\r\n};\r\n//# sourceMappingURL=GithubFile.js.map","references":["/Users/TimMoreton/Code/tinacms/node_modules/@types/react/index.d.ts","/Users/TimMoreton/Code/tinacms/node_modules/@tinacms/react-core/dist/index.d.ts"],"map":"{\"version\":3,\"file\":\"GithubFile.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/github-client/GithubFile.ts\"],\"names\":[],\"mappings\":\"AAAA;;;;;;;;;;;;;;;;EAgBE;AAEF,OAAO,EAAE,OAAO,EAAE,MAAM,OAAO,CAAA;AAC/B,OAAO,EAAE,MAAM,EAAE,MAAM,qBAAqB,CAAA;AAK5C,MAAM,OAAO,UAAU;IAGrB,YACU,GAAQ,EACR,IAAY,EACZ,KAAe,EACf,SAAuB;QAHvB,QAAG,GAAH,GAAG,CAAK;QACR,SAAI,GAAJ,IAAI,CAAQ;QACZ,UAAK,GAAL,KAAK,CAAU;QACf,cAAS,GAAT,SAAS,CAAc;QANzB,QAAG,GAAkB,IAAI,CAAA;QASjC,cAAS,GAAG,KAAK,IAAI,EAAE;YACrB,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;YAC1D,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAA;YAClB,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAA;QAC3D,CAAC,CAAA;QAED,WAAM,GAAG,KAAK,EACZ,IAAS,EACT,UAAkB,qBAAqB,EACvC,eAAe,GAAG,IAAI,EACtB,EAAE;YACF,MAAM,iBAAiB,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAA;YACtE,IAAI;gBACF,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE;oBACb,MAAM,GAAG,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA;oBAC1D,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,GAAG,CAAA;iBACnB;gBACD,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,MAAM,CAC/C,IAAI,CAAC,IAAI,EACT,IAAI,CAAC,GAAG,EACR,iBAAiB,EACjB,OAAO,CACR,CAAA;gBACD,IAAI,CAAC,GAAG,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAA;gBAC/B,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,IAAI,EAAE,eAAe,EAAE,QAAQ,EAAE,CAAC,CAAA;gBAC7D,OAAO,QAAQ,CAAA;aAChB;YAAC,OAAO,KAAK,EAAE;gBACd,IAAI,KAAK,CAAC,MAAM,IAAI,GAAG,IAAI,eAAe,EAAE;oBAC1C,MAAM,IAAI,CAAC,SAAS,EAAE,CAAA,CAAC,aAAa;oBACpC,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,OAAO,EAAE,KAAK,CAAC,CAAA,CAAC,oBAAoB;iBAC7D;qBAAM;oBACL,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,CAAC,EAAE,IAAI,EAAE,cAAc,EAAE,KAAK,EAAE,CAAC,CAAA;oBACzD,MAAM,KAAK,CAAA;iBACZ;aACF;QACH,CAAC,CAAA;IArCE,CAAC;CAsCL;AAED,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,EAC5B,IAAI,EACJ,KAAK,EACL,SAAS,GAKV,EAAE,EAAE;IACH,MAAM,GAAG,GAAG,MAAM,EAAE,CAAA;IACpB,OAAO,OAAO,CAAC,GAAG,EAAE;QAClB,OAAO,IAAI,UAAU,CAAC,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,SAAS,CAAC,CAAA;IACpD,CAAC,EAAE,CAAC,IAAI,EAAE,KAAK,EAAE,SAAS,EAAE,GAAG,CAAC,CAAC,CAAA;AACnC,CAAC,CAAA\"}","dts":{"name":"/Users/TimMoreton/Code/tinacms/packages/react-tinacms-github/src/github-client/GithubFile.d.ts","writeByteOrderMark":false,"text":"/**\r\n\nCopyright 2019 Forestry.io Inc\r\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n\n*/\r\ndeclare type parseFn = (content: string) => any;\r\ndeclare type serializeFn = (data: any) => string;\r\nexport declare class GithubFile {\r\n    private cms;\r\n    private path;\r\n    private parse?;\r\n    private serialize?;\r\n    private sha;\r\n    constructor(cms: any, path: string, parse?: parseFn | undefined, serialize?: serializeFn | undefined);\r\n    fetchFile: () => Promise<any>;\r\n    commit: (data: any, message?: string, retryOnConflict?: boolean) => Promise<any>;\r\n}\r\nexport declare const useGithubFile: ({ path, parse, serialize, }: {\r\n    path: string;\r\n    parse?: parseFn | undefined;\r\n    serialize?: serializeFn | undefined;\r\n}) => GithubFile;\r\nexport {};\r\n"}}
