{"code":"/**\r\n\nCopyright 2019 Forestry.io Inc\r\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n\n*/\r\nimport { b64EncodeUnicode } from './base64';\r\nimport Cookies from 'js-cookie';\r\nimport { authenticate } from './authenticate';\r\nexport * from './authenticate';\r\nfunction removeLeadingSlash(path) {\r\n    if (path.charAt(0) === '/') {\r\n        return path.substring(1);\r\n    }\r\n    return path;\r\n}\r\nexport class GithubClient {\r\n    constructor({ proxy, clientId, authCallbackRoute, baseRepoFullName, baseBranch = 'master', authScope = 'public_repo', }) {\r\n        this.proxy = proxy;\r\n        this.baseRepoFullName = baseRepoFullName;\r\n        this.baseBranch = baseBranch;\r\n        this.clientId = clientId;\r\n        this.authCallbackRoute = authCallbackRoute;\r\n        this.authScope = authScope;\r\n        this.validate();\r\n    }\r\n    authenticate() {\r\n        return authenticate(this.clientId, this.authCallbackRoute, this.authScope);\r\n    }\r\n    isAuthenticated() {\r\n        return this.getUser();\r\n    }\r\n    get isFork() {\r\n        return this.workingRepoFullName !== this.baseRepoFullName;\r\n    }\r\n    async isAuthorized() {\r\n        try {\r\n            const repo = await this.getRepository();\r\n            return repo.permissions.push;\r\n        }\r\n        catch {\r\n            return false;\r\n        }\r\n    }\r\n    async getUser() {\r\n        try {\r\n            const data = await this.req({\r\n                url: `https://api.github.com/user`,\r\n                method: 'GET',\r\n            });\r\n            return data;\r\n        }\r\n        catch (e) {\r\n            if ((e.status = 401)) {\r\n                return;\r\n            }\r\n            throw e;\r\n        }\r\n    }\r\n    getRepository() {\r\n        return this.req({\r\n            url: `https://api.github.com/repos/${this.workingRepoFullName}`,\r\n        });\r\n    }\r\n    async createFork() {\r\n        const fork = await this.req({\r\n            url: `https://api.github.com/repos/${this.baseRepoFullName}/forks`,\r\n            method: 'POST',\r\n        });\r\n        this.setCookie(GithubClient.WORKING_REPO_COOKIE_KEY, fork.full_name);\r\n        return fork;\r\n    }\r\n    createPR(title, body) {\r\n        const workingRepoFullName = this.workingRepoFullName;\r\n        const headBranch = this.branchName;\r\n        return this.req({\r\n            url: `https://api.github.com/repos/${this.baseRepoFullName}/pulls`,\r\n            method: 'POST',\r\n            data: {\r\n                title: title ? title : 'Update from TinaCMS',\r\n                body: body ? body : 'Please pull these awesome changes in!',\r\n                head: `${workingRepoFullName.split('/')[0]}:${headBranch}`,\r\n                base: this.baseBranch,\r\n            },\r\n        });\r\n    }\r\n    get workingRepoFullName() {\r\n        const forkName = this.getCookie(GithubClient.WORKING_REPO_COOKIE_KEY);\r\n        if (forkName) {\r\n            return forkName;\r\n        }\r\n        return this.baseRepoFullName;\r\n    }\r\n    setWorkingRepoFullName(repoFullName) {\r\n        this.setCookie(GithubClient.WORKING_REPO_COOKIE_KEY, repoFullName);\r\n    }\r\n    get branchName() {\r\n        const branchName = this.getCookie(GithubClient.HEAD_BRANCH_COOKIE_KEY);\r\n        if (branchName) {\r\n            return branchName;\r\n        }\r\n        return this.baseBranch;\r\n    }\r\n    setWorkingBranch(branch) {\r\n        this.setCookie(GithubClient.HEAD_BRANCH_COOKIE_KEY, branch);\r\n    }\r\n    async fetchExistingPR() {\r\n        const workingRepoFullName = this.workingRepoFullName;\r\n        const headBranch = this.branchName;\r\n        const branches = await this.req({\r\n            url: `https://api.github.com/repos/${this.baseRepoFullName}/pulls`,\r\n            method: 'GET',\r\n        });\r\n        for (let i = 0; i < branches.length; i++) {\r\n            const pull = branches[i];\r\n            if (headBranch === pull.head.ref) {\r\n                if (pull.head.repo?.full_name === workingRepoFullName &&\r\n                    pull.base.repo?.full_name === this.baseRepoFullName) {\r\n                    return pull; // found matching PR\r\n                }\r\n            }\r\n        }\r\n        return;\r\n    }\r\n    async getBranch() {\r\n        try {\r\n            const workingRepoFullName = this.workingRepoFullName;\r\n            const branch = this.branchName;\r\n            const data = await this.req({\r\n                url: `https://api.github.com/repos/${workingRepoFullName}/git/ref/heads/${branch}`,\r\n                method: 'GET',\r\n            });\r\n            return data;\r\n        }\r\n        catch (e) {\r\n            if ((e.status = 404)) {\r\n                return;\r\n            }\r\n            throw e;\r\n        }\r\n        // TODO\r\n        // if (data.ref.startsWith('refs/heads/')) {\r\n        //   //check if branch, and not tag\r\n        //   return data\r\n        // }\r\n        // return // Bubble up error here?\r\n    }\r\n    async getBranchList() {\r\n        return await this.req({\r\n            url: `https://api.github.com/repos/${this.workingRepoFullName}/branches`,\r\n            method: 'GET',\r\n        });\r\n    }\r\n    async createBranch(name) {\r\n        console.log(\"creating branchhhh\");\r\n        const currentBranch = await this.getBranch();\r\n        const sha = currentBranch.object.sha;\r\n        return this.req({\r\n            url: `https://api.github.com/repos/${this.workingRepoFullName}/git/refs`,\r\n            method: 'POST',\r\n            data: {\r\n                ref: `refs/heads/${name}`,\r\n                sha,\r\n            },\r\n        });\r\n    }\r\n    async commit(filePath, sha, fileContents, commitMessage = 'Update from TinaCMS') {\r\n        const repo = this.workingRepoFullName;\r\n        const branch = this.branchName;\r\n        return this.req({\r\n            url: `https://api.github.com/repos/${repo}/contents/${removeLeadingSlash(filePath)}`,\r\n            method: 'PUT',\r\n            data: {\r\n                message: commitMessage,\r\n                content: b64EncodeUnicode(fileContents),\r\n                sha,\r\n                branch: branch,\r\n            },\r\n        });\r\n    }\r\n    async getDownloadUrl(path) {\r\n        const res = await this.fetchFile(path, false);\r\n        return res.download_url;\r\n    }\r\n    async fetchFile(filePath, decoded = true) {\r\n        const repo = this.workingRepoFullName;\r\n        const branch = this.branchName;\r\n        const request = await this.req({\r\n            url: `https://api.github.com/repos/${repo}/contents/${removeLeadingSlash(filePath)}?ref=${branch}`,\r\n            method: 'GET',\r\n        });\r\n        // decode using base64 decoding (https://developer.mozilla.org/en-US/docs/Glossary/Base64)\r\n        request.content = decoded ? atob(request.content || '') : request.content;\r\n        return request;\r\n    }\r\n    /*\r\n    added or deletes files from github\r\n    */\r\n    async githubFileApi(path, fileContents, commitMessage = 'Update from TinaCMS', encoded = false, method) {\r\n        const repo = this.workingRepoFullName;\r\n        const branch = this.branchName;\r\n        let sha = null;\r\n        try {\r\n            ;\r\n            ({ sha } = await this.fetchFile(path));\r\n        }\r\n        catch (e) { }\r\n        return this.req({\r\n            url: `https://api.github.com/repos/${repo}/contents/${removeLeadingSlash(path)}`,\r\n            method,\r\n            data: {\r\n                message: commitMessage,\r\n                content: encoded ? fileContents : b64EncodeUnicode(fileContents),\r\n                branch: branch,\r\n                sha,\r\n            },\r\n        });\r\n    }\r\n    async upload(path, fileContents, commitMessage = 'Update from TinaCMS', encoded = false) {\r\n        return this.githubFileApi(path, fileContents, commitMessage, encoded, 'PUT');\r\n    }\r\n    async delete(path, commitMessage = `Deleted ${path} using TinaCMS`) {\r\n        return this.githubFileApi(path, '', commitMessage, false, 'DELETE');\r\n    }\r\n    async req(data) {\r\n        const response = await this.proxyRequest(data);\r\n        console.log(response);\r\n        return this.getGithubResponse(response);\r\n    }\r\n    async getGithubResponse(response) {\r\n        const data = await response.json();\r\n        //2xx status codes\r\n        if (response.status.toString()[0] == '2')\r\n            return data;\r\n        throw new GithubError(data.message || response.statusText, response.status);\r\n    }\r\n    validate() {\r\n        const errors = [];\r\n        if (!this.proxy) {\r\n            errors.push('Missing `proxy` URL');\r\n        }\r\n        if (!this.authCallbackRoute) {\r\n            errors.push('Missing `authCallbackRoute`');\r\n        }\r\n        if (!this.baseRepoFullName) {\r\n            errors.push('Missing `baseRepoFullName`. It may not have been set in environment variables.');\r\n        }\r\n        if (!this.clientId) {\r\n            errors.push('Missing `clientId`. It may not have been set in environment variables.');\r\n        }\r\n        if (errors.length) {\r\n            throw new Error(createErrorMessage(errors));\r\n        }\r\n    }\r\n    /**\r\n     * The methods below maybe don't belong on GitHub client, but it's fine for now.\r\n     */\r\n    proxyRequest(data) {\r\n        // For implementations using the csrf mitigation\r\n        // const token = localStorage.getItem('tinacms-github-token') || null\r\n        const token = localStorage.getItem('github-access-token') || null;\r\n        console.log('in proxyRequest ', data);\r\n        const headers = new Headers();\r\n        if (token) {\r\n            headers.append('Authorization', 'token ' + token);\r\n        }\r\n        return fetch(this.proxy, {\r\n            method: 'POST',\r\n            headers: headers,\r\n            body: JSON.stringify(data),\r\n        });\r\n    }\r\n    getCookie(cookieName) {\r\n        console.log('returning cookie ', cookieName);\r\n        return Cookies.get(cookieName);\r\n    }\r\n    setCookie(cookieName, val) {\r\n        Cookies.set(cookieName, val);\r\n    }\r\n}\r\nGithubClient.WORKING_REPO_COOKIE_KEY = 'working_repo_full_name';\r\nGithubClient.HEAD_BRANCH_COOKIE_KEY = 'head_branch';\r\nclass GithubError extends Error {\r\n    constructor(message, status) {\r\n        super(message);\r\n        this.message = message;\r\n        this.status = status;\r\n    }\r\n}\r\nconst createErrorMessage = (errors) => `Failed to create the TinaCMS GithubClient\n\n${errors.map(error => `\\t* ${error}`).join('\\n')}\n\nVisit the setup guide for more information\n\n\\thttps://tinacms.org/guides/nextjs/github-open-authoring/configure-custom-app\n`;\r\n//# sourceMappingURL=github-client.js.map","references":["/Users/TimMoreton/Code/tinacms/packages/react-tinacms-github/src/github-client/base64.ts","/Users/TimMoreton/Code/tinacms/node_modules/@types/js-cookie/index.d.ts","/Users/TimMoreton/Code/tinacms/packages/react-tinacms-github/src/github-client/authenticate.ts","/Users/TimMoreton/Code/tinacms/packages/react-tinacms-github/src/github-client/authenticate.ts"],"map":"{\"version\":3,\"file\":\"github-client.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../../../src/github-client/github-client.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/Users/TimMoreton/Code/tinacms/packages/react-tinacms-github/src/github-client/github-client.d.ts","writeByteOrderMark":false,"text":"/**\r\n\nCopyright 2019 Forestry.io Inc\r\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\r\nyou may not use this file except in compliance with the License.\r\nYou may obtain a copy of the License at\r\n\n    http://www.apache.org/licenses/LICENSE-2.0\r\n\nUnless required by applicable law or agreed to in writing, software\r\ndistributed under the License is distributed on an \"AS IS\" BASIS,\r\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\nSee the License for the specific language governing permissions and\r\nlimitations under the License.\r\n\n*/\r\nexport * from './authenticate';\r\nexport interface GithubClientOptions {\r\n    proxy: string;\r\n    clientId: string;\r\n    authCallbackRoute: string;\r\n    baseRepoFullName: string;\r\n    baseBranch?: string;\r\n    authScope?: AuthScope;\r\n}\r\nexport interface Branch {\r\n    name: string;\r\n    protected: boolean;\r\n}\r\nexport declare type AuthScope = 'public_repo' | 'repo';\r\nexport declare class GithubClient {\r\n    static WORKING_REPO_COOKIE_KEY: string;\r\n    static HEAD_BRANCH_COOKIE_KEY: string;\r\n    proxy: string;\r\n    baseRepoFullName: string;\r\n    baseBranch: string;\r\n    clientId: string;\r\n    authCallbackRoute: string;\r\n    authScope: AuthScope;\r\n    constructor({ proxy, clientId, authCallbackRoute, baseRepoFullName, baseBranch, authScope, }: GithubClientOptions);\r\n    authenticate(): Promise<void>;\r\n    isAuthenticated(): Promise<any>;\r\n    get isFork(): boolean;\r\n    isAuthorized(): Promise<boolean>;\r\n    getUser(): Promise<any>;\r\n    getRepository(): Promise<any>;\r\n    createFork(): Promise<any>;\r\n    createPR(title: string, body: string): Promise<any>;\r\n    get workingRepoFullName(): string;\r\n    setWorkingRepoFullName(repoFullName: string): void;\r\n    get branchName(): string;\r\n    setWorkingBranch(branch: string): void;\r\n    fetchExistingPR(): Promise<any>;\r\n    getBranch(): Promise<any>;\r\n    getBranchList(): Promise<Branch[]>;\r\n    createBranch(name: string): Promise<any>;\r\n    commit(filePath: string, sha: string, fileContents: string, commitMessage?: string): Promise<any>;\r\n    getDownloadUrl(path: string): Promise<string>;\r\n    fetchFile(filePath: string, decoded?: boolean): Promise<any>;\r\n    githubFileApi(path: string, fileContents: string, commitMessage: string | undefined, encoded: boolean | undefined, method: 'PUT' | 'DELETE'): Promise<any>;\r\n    upload(path: string, fileContents: string, commitMessage?: string, encoded?: boolean): Promise<any>;\r\n    delete(path: string, commitMessage?: string): Promise<any>;\r\n    protected req(data: any): Promise<any>;\r\n    protected getGithubResponse(response: Response): Promise<any>;\r\n    private validate;\r\n    /**\r\n     * The methods below maybe don't belong on GitHub client, but it's fine for now.\r\n     */\r\n    private proxyRequest;\r\n    private getCookie;\r\n    private setCookie;\r\n}\r\n"}}
